<?php
/**
 * Magiccart 
 * @category    Magiccart 
 * @copyright   Copyright (c) 2014 Magiccart (http://www.magiccart.net/) 
 * @license     http://www.magiccart.net/license-agreement.html
 * @Author: DOng NGuyen<nguyen@dvn.com>
 * @@Create Date: 2016-02-14 20:26:27
 * @@Modify Date: 2016-04-27 10:18:46
 * @@Function:
 */

namespace Magiccart\Alothemes\Helper;

class Data extends \Magento\Framework\App\Helper\AbstractHelper
{

    public $_labels = array();
    public $_timer = array();

    public function getConfig($cfg=null)
    {
        if($cfg) return $this->scopeConfig->getValue( $cfg, \Magento\Store\Model\ScopeInterface::SCOPE_STORE );
        return $this->scopeConfig;
    }

    public function getLabelsCfg()
    {
        if(!$this->_labels) $this->_labels = $this->getConfig('alothemes/labels');
        return $this->_labels;
    }

    public function getTimerCfg()
    {
        if(!$this->_timer) $this->_timer = $this->getConfig('alothemes/timer');
        return $this->_timer;
    }

    public function getImageHover($product)
    {
        return  $product->load('media_gallery')->getMediaGalleryImages()->getItemByColumnValue('position','2')->getFile(); //->getItemByColumnValue('label','Imagehover')
    }

    public function getTimer($product)
    {
        $config = $this->getTimerCfg();
        if(!$config['enabled']) return;
        return $this->getLayout()->createBlock('Magento\Framework\View\Element\Template')->setProduct($product)->setTemplate('timer/timer.phtml')->toHtml();
    }

    public function getLabels($product)
    {
        $html  = '';
        $config = $this->getLabelsCfg();
        $newText = isset($config['newText']) ? $config['newText'] : ''; // get in Cfg;
        if($newText && $this->isNew($product)) $html .= '<span class="sticker top-left"><span class="labelnew">' . __($newText) . '</span></span>';
        $percent = isset($config['salePercent']) ? $config['salePercent'] : false; // get in Cfg;
        if($percent){
            $price = $product->getPrice();
            $finalPrice = $product->getFinalPrice();
            $saleLabel = floor(($finalPrice/$price)*100 - 100).'%';
        }else {
            $saleLabel = isset($config['saleText']) ? $config['saleText'] : '';
        }
        if($saleLabel && $this->isOnSale($product)) $html .= '<span class="sticker top-right"><span class="labelsale">' . __($saleLabel) . '</span></span>';
        
        return $html;
    }

    protected function isNew($product)
    {
        return $this->_nowIsBetween($product->getData('news_from_date'), $product->getData('news_to_date'));
    }

    protected function isOnSale($product)
    {
        $specialPrice = number_format($product->getFinalPrice(), 2);
        $regularPrice = number_format($product->getPrice(), 2);

        if ($specialPrice != $regularPrice) return $this->_nowIsBetween($product->getData('special_from_date'), $product->getData('special_to_date'));
        else return false;
    }
    
    protected function _nowIsBetween($fromDate, $toDate)
    {
        if ($fromDate){
            $fromDate = strtotime($fromDate);
            $toDate = strtotime($toDate);
            $now = strtotime(date("Y-m-d H:i:s"));
            
            if ($toDate){
                if ($fromDate <= $now && $now <= $toDate) return true;
            }else {
                if ($fromDate <= $now) return true;
            }
        }
        return false;
    }

    public function getPrcents()
    {
        return array(1 => '100%', 2 => '50%', 3 => '33.333333333%', 4 => '25%', 5 => '20%', 6 => '16.666666666%', 7 => '14.285714285%', 8 => '12.5%');
    }

    public function getResponsiveBreakpoints()
    {
        return array(1200=>'visible', 992=>'desktop', 768=>'tablet', 640=>'landscape', 480=>'portrait', 361=>'mobile', 1=>'mobile');
    }

    public function getGridCfg($selector)
    {
        $styles = $selector .'{ float: left;}';
        $listCfg  = $this->getConfig('alothemes/grid');
        $padding = $listCfg['padding'];
        $prcents = $this->getPrcents();
        $breakpoints = $this->getResponsiveBreakpoints(); ksort($breakpoints);
        $total = count($breakpoints);
        $i = $tmp = 1;
        foreach ($breakpoints as $key => $value) {
            $tmpKey = ( $i == 1 || $i == $total) ? $value : current($breakpoints);
            if($i >1){
                $styles .= ' @media (min-width: '. $tmp .'px) and (max-width: ' . ($key-1) . 'px) {' .$selector. '{padding: 0 '.$padding.'px; width: '.$prcents[$listCfg[$value]] .'} ' .$selector. ':nth-child(' .$listCfg[$value]. 'n+1){clear: left;}}';
                next($breakpoints);
            }
            if( $i == $total ) $styles .= ' @media (min-width: ' . $key . 'px) {' .$selector. '{padding: 0 '.$padding.'px; width: '.$prcents[$listCfg[$value]] .'} ' .$selector. ':nth-child(' .$listCfg[$value]. 'n+1){clear: left;}}';
            $tmp = $key;
            $i++;
        }
        return  '<style type="text/css">' .$styles. '</style>';
    }


    public function getConfgRUC($type) // with Type = 'related' || 'upsell' || 'crosssell'
    {
        $data = $this->getConfig('alothemes/' .$type);
        $breakpoints = $this->getResponsiveBreakpoints();
        $total = count($breakpoints);
        if($data['slide']){
            $data['vertical-Swiping'] = $data['vertical'];
            $responsive = '[';
            foreach ($breakpoints as $size => $opt) {
                $responsive .= '{"breakpoint": "'.$size.'", "settings": {"slidesToShow": "'.$data[$opt].'"}}';
                $total--;
                if($total) $responsive .= ', ';
            }
            $responsive .= ']';
            $data['slides-To-Show'] = $data['visible'];
            $data['swipe-To-Slide'] = 'true';
            $data['responsive'] = $responsive;
            $Rm = array('slide', 'visible', 'desktop', 'tablet', 'landscape', 'portrait', 'mobile'); // require with slick
            foreach ($Rm as $vl) { unset($data[$vl]); }

            return $data;

        } else {
            $prcents = $this->getPrcents();
            $padding = $data['padding'];
            $selector = '.' . $type .' .products-grid .product-item';
            $styles = $selector .'{ float: left;}';
            $i = $tmp= 1;
            foreach ($breakpoints as $key => $value) {
                $tmpKey = ( $i == 1 || $i == $total ) ? $value : current($breakpoints);
                if($i >1){
                    $styles .= ' @media (min-width: '. $tmp .'px) and (max-width: ' . ($key-1) . 'px) {' .$selector. '{padding: 0 '.$padding.'px; width: '.$prcents[$data[$value]] .'} ' .$selector. ':nth-child(' .$data[$value]. 'n+1){clear: left;}}';
                    next($breakpoints);
                }
                if( $i == $total ) $styles .= ' @media (min-width: ' . $key . 'px) {' .$selector. '{padding: 0 '.$padding.'px; width: '.$prcents[$data[$value]] .'} ' .$selector. ':nth-child(' .$data[$value]. 'n+1){clear: left;}}';
                $tmp = $key;
                $i++;
            }

            return '<style type="text/css">' .$styles. '</style>';
        }
    }
}
